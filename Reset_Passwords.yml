---
- hosts: all  # Target all hosts
  gather_facts: no  # Skip fact gathering to speed up the process
  become: yes  # Use elevated privileges
  vars:
    change_sshkey: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBznwIb7wGsPVKqUqehpBK7wpUBHaiqU1HQEwfc48LzP"  # New SSH key to set
    user_passwords: []  # Initialize an empty list for user passwords

  tasks:
    - name: Fetch non-system users
      shell: "awk -F: '$3 >= 1000 && $3 != 65534 {print $1}' /etc/passwd"
      register: users  # Store the list of non-system users
      changed_when: false  # Do not report change if no non-system users found

    - name: Generate unique random password for each user
      set_fact:
        user_passwords: "{{ user_passwords | default([]) + [{'user': item, 'password': lookup('password', '/dev/null chars=ascii_letters,digits length=12')}] }}"
      loop: "{{ users.stdout_lines }}"  # Loop through each non-system user
      when: users.stdout_lines is defined and users.stdout_lines | length > 0

    - name: Set unique random password for each user
      user:
        name: "{{ item.user }}"
        update_password: always  # Always update the password
        password: "{{ item.password | password_hash('sha512') }}"  # Hash the password using SHA-512
      loop: "{{ user_passwords }}"  # Apply the new password to each user
      register: password_change

    - name: Force Password Expiration
      command: "chage -d 0 {{ item }}"  # Force password change on next login
      with_items: "{{ users.stdout_lines }}"
      when: users.stdout_lines is defined and users.stdout_lines | length > 0  

    - name: Ensure SSH authorized_keys file exists for each user
      stat:
        path: "/home/{{ item }}/.ssh/authorized_keys"
      register: auth_key_stat
      with_items: "{{ users.stdout_lines }}"
      when: users.stdout_lines is defined and users.stdout_lines | length > 0

    - name: Backup existing authorized_keys file
      copy:
        src: "/home/{{ item.item }}/.ssh/authorized_keys"
        dest: "/home/{{ item.item }}/.ssh/authorized_keys.old"
        remote_src: yes
        owner: "{{ item.item }}"
        group: "{{ item.item }}"
        mode: preserve  # Preserve existing file mode
      register: backup
      with_items: "{{ auth_key_stat.results }}"
      when: "item.stat.exists"  # Backup existing SSH keys

    - name: Replace authorized_keys file with new SSH key
      copy:
        dest: "/home/{{ item.item }}/.ssh/authorized_keys"
        content: "{{ change_sshkey }}"  # Replace authorized_keys content with new SSH key
        owner: "{{ item.item }}"
        group: "{{ item.item }}"
        mode: '0600'  # Set appropriate permissions
      with_items: "{{ auth_key_stat.results }}"
      when: "item.stat.exists and backup is defined"  # Replace SSH keys

